// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package courier

@SerialVersionUID(0L)
final case class StartingCity(
    city1: _root_.scala.Predef.String = "",
    city2: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[StartingCity] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = city1
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = city2
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = city1
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = city2
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withCity1(__v: _root_.scala.Predef.String): StartingCity = copy(city1 = __v)
    def withCity2(__v: _root_.scala.Predef.String): StartingCity = copy(city2 = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = city1
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = city2
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(city1)
        case 2 => _root_.scalapb.descriptors.PString(city2)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = courier.StartingCity
}

object StartingCity extends scalapb.GeneratedMessageCompanion[courier.StartingCity] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[courier.StartingCity] = this
  def merge(`_message__`: courier.StartingCity, `_input__`: _root_.com.google.protobuf.CodedInputStream): courier.StartingCity = {
    var __city1 = `_message__`.city1
    var __city2 = `_message__`.city2
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __city1 = _input__.readStringRequireUtf8()
        case 18 =>
          __city2 = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    courier.StartingCity(
        city1 = __city1,
        city2 = __city2,
        unknownFields = if (_unknownFields__ == null) _message__.unknownFields else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[courier.StartingCity] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      courier.StartingCity(
        city1 = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        city2 = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = CourierProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = CourierProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = courier.StartingCity(
    city1 = "",
    city2 = ""
  )
  implicit class StartingCityLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, courier.StartingCity]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, courier.StartingCity](_l) {
    def city1: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.city1)((c_, f_) => c_.copy(city1 = f_))
    def city2: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.city2)((c_, f_) => c_.copy(city2 = f_))
  }
  final val CITY1_FIELD_NUMBER = 1
  final val CITY2_FIELD_NUMBER = 2
  def of(
    city1: _root_.scala.Predef.String,
    city2: _root_.scala.Predef.String
  ): _root_.courier.StartingCity = _root_.courier.StartingCity(
    city1,
    city2
  )
}
