
// Generated by Akka gRPC. DO NOT EDIT.
package courier

import scala.concurrent.ExecutionContext

import io.grpc.MethodDescriptor

import akka.actor.ClassicActorSystemProvider

import akka.grpc.GrpcClientSettings

import akka.grpc.scaladsl.AkkaGrpcClient

import akka.grpc.internal.Marshaller
import akka.grpc.internal.NettyClientUtils
import akka.grpc.internal.ClientState

import akka.grpc.scaladsl.SingleResponseRequestBuilder
import akka.grpc.internal.ScalaUnaryRequestBuilder

// Not sealed so users can extend to write their stubs
trait CourierServiceClient extends CourierService with CourierServiceClientPowerApi with AkkaGrpcClient

object CourierServiceClient {
  def apply(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider): CourierServiceClient =
    new DefaultCourierServiceClient(settings)
}

final class DefaultCourierServiceClient(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider) extends CourierServiceClient {
  import DefaultCourierServiceClient._

  private implicit val ex: ExecutionContext = sys.classicSystem.dispatcher
  private val options = NettyClientUtils.callOptions(settings)
  private val clientState = new ClientState(settings, akka.event.Logging(sys.classicSystem, this.getClass))

  
    private def findPathRequestBuilder(channel: akka.grpc.internal.InternalChannel) = {
      
        new ScalaUnaryRequestBuilder(findPathDescriptor, channel, options, settings)
      
    }
  

  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer findPath(courier.StartingCity) if possible.
     */
    
      override def findPath(): SingleResponseRequestBuilder[courier.StartingCity, courier.Path] =
        findPathRequestBuilder(clientState.internalChannel)
    

    /**
     * For access to method metadata use the parameterless version of findPath
     */
    def findPath(in: courier.StartingCity): scala.concurrent.Future[courier.Path] =
      findPath().invoke(in)
  

  override def close(): scala.concurrent.Future[akka.Done] = clientState.close()
  override def closed: scala.concurrent.Future[akka.Done] = clientState.closed()

}



private object DefaultCourierServiceClient {

  def apply(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider): CourierServiceClient =
    new DefaultCourierServiceClient(settings)

  import CourierService.Serializers._

  
    private val findPathDescriptor: MethodDescriptor[courier.StartingCity, courier.Path] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("courier.CourierService", "FindPath"))
        .setRequestMarshaller(new Marshaller(StartingCitySerializer))
        .setResponseMarshaller(new Marshaller(PathSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
}

trait CourierServiceClientPowerApi {
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer findPath(courier.StartingCity) if possible.
     */
    
      def findPath(): SingleResponseRequestBuilder[courier.StartingCity, courier.Path] = ???
    
  

}
